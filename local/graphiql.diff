diff --git a/css/doc-explorer.css b/css/doc-explorer.css
index 0a735e4..3635434 100644
--- a/css/doc-explorer.css
+++ b/css/doc-explorer.css
@@ -72,6 +72,20 @@
   min-width: 300px;
 }
 
+.graphiql-container .doc-type-kind {
+  border-bottom: 1px solid #e0e0e0;
+  color: #777;
+  cursor: default;
+  font-size: 20px;
+  font-variant: small-caps;
+  font-weight: bold;
+  letter-spacing: 1px;
+  margin: 0 -15px 10px 0;
+  padding: 10px 0;
+  -webkit-user-select: none;
+          user-select: none;
+}
+
 .graphiql-container .doc-type-description p:first-child ,
 .graphiql-container .doc-type-description blockquote:first-child {
   margin-top: 0;
diff --git a/package.json b/package.json
index 2ad80c7..82541f4 100644
--- a/package.json
+++ b/package.json
@@ -52,6 +52,7 @@
   "dependencies": {
     "codemirror": "^5.26.0",
     "codemirror-graphql": "^0.6.11",
+    "html-to-react": "1.2.11",
     "markdown-it": "^8.4.0"
   },
   "peerDependencies": {
diff --git a/src/components/DocExplorer.js b/src/components/DocExplorer.js
index 25c00e2..a534df6 100644
--- a/src/components/DocExplorer.js
+++ b/src/components/DocExplorer.js
@@ -102,6 +102,7 @@ export class DocExplorer extends React.Component {
     } else {
       content = (
         <FieldDoc
+          schema={schema}
           field={navItem.def}
           onClickType={this.handleClickTypeOrField}
         />
diff --git a/src/components/DocExplorer/FieldDoc.js b/src/components/DocExplorer/FieldDoc.js
index eb70653..88b1795 100644
--- a/src/components/DocExplorer/FieldDoc.js
+++ b/src/components/DocExplorer/FieldDoc.js
@@ -12,9 +12,11 @@ import PropTypes from 'prop-types';
 import Argument from './Argument';
 import MarkdownContent from './MarkdownContent';
 import TypeLink from './TypeLink';
+import { GraphQLSchema } from 'graphql';
 
 export default class FieldDoc extends React.Component {
   static propTypes = {
+    schema: PropTypes.instanceOf(GraphQLSchema),
     field: PropTypes.object,
     onClickType: PropTypes.func,
   };
@@ -39,6 +41,8 @@ export default class FieldDoc extends React.Component {
                 <Argument arg={arg} onClickType={this.props.onClickType} />
               </div>
               <MarkdownContent
+                schema={this.props.schema}
+                onClickType={this.props.onClickType}
                 className="doc-value-description"
                 markdown={arg.description}
               />
@@ -50,12 +54,19 @@ export default class FieldDoc extends React.Component {
 
     return (
       <div>
+        <div className="doc-type-kind">
+          {'field'}
+        </div>
         <MarkdownContent
+          schema={this.props.schema}
+          onClickType={this.props.onClickType}
           className="doc-type-description"
           markdown={field.description || 'No Description'}
         />
         {field.deprecationReason &&
           <MarkdownContent
+            schema={this.props.schema}
+            onClickType={this.props.onClickType}
             className="doc-deprecation"
             markdown={field.deprecationReason}
           />}
diff --git a/src/components/DocExplorer/MarkdownContent.js b/src/components/DocExplorer/MarkdownContent.js
index ce9941c..dfffa1f 100644
--- a/src/components/DocExplorer/MarkdownContent.js
+++ b/src/components/DocExplorer/MarkdownContent.js
@@ -9,6 +9,9 @@
 import React from 'react';
 import PropTypes from 'prop-types';
 import MD from 'markdown-it';
+import { GraphQLSchema } from 'graphql';
+import TypeLink from './TypeLink';
+import htmlToReact from 'html-to-react';
 
 const md = new MD();
 
@@ -16,6 +19,8 @@ export default class MarkdownContent extends React.Component {
   static propTypes = {
     markdown: PropTypes.string,
     className: PropTypes.string,
+    schema: PropTypes.instanceOf(GraphQLSchema),
+    onClickType: PropTypes.func
   };
 
   shouldComponentUpdate(nextProps) {
@@ -28,11 +33,33 @@ export default class MarkdownContent extends React.Component {
       return <div />;
     }
 
-    return (
-      <div
-        className={this.props.className}
-        dangerouslySetInnerHTML={{ __html: md.render(markdown) }}
-      />
-    );
+    let html = md.render(markdown, { sanitize: true });
+
+    html = `<div class="${this.props.className}">${html}</div>`
+
+    let typeMap = this.props.schema.getTypeMap();
+    let processNodeDefinitions = new htmlToReact.ProcessNodeDefinitions(React);
+    let instructions = [
+        {
+            shouldProcessNode: (node) => {
+                return node && node.name && node.name === "a";
+            },
+            processNode: (node, children, index) => {
+                let name = node.children.map((child) => child.data).join("");
+                let type = typeMap[name]
+                if (type === undefined)
+                    return processNodeDefinitions.processDefaultNode(node, children, index)
+                else
+                    return <TypeLink type={type} onClick={this.props.onClickType} />;
+            }
+        }, {
+            shouldProcessNode: (node) => true,
+            processNode: processNodeDefinitions.processDefaultNode
+        }
+    ];
+    var htmlToReactParser = new htmlToReact.Parser();
+    var markup = htmlToReactParser.parseWithInstructions(html, () => true, instructions);
+
+    return markup;
   }
 }
diff --git a/src/components/DocExplorer/SchemaDoc.js b/src/components/DocExplorer/SchemaDoc.js
index 0b028d8..729f247 100644
--- a/src/components/DocExplorer/SchemaDoc.js
+++ b/src/components/DocExplorer/SchemaDoc.js
@@ -33,6 +33,8 @@ export default class SchemaDoc extends React.Component {
     return (
       <div>
         <MarkdownContent
+          schema={schema}
+          onClickType={this.props.onClickType}
           className="doc-type-description"
           markdown={
             'A GraphQL schema provides a root type for each kind of operation.'
diff --git a/src/components/DocExplorer/TypeDoc.js b/src/components/DocExplorer/TypeDoc.js
index 425a7da..743c6ff 100644
--- a/src/components/DocExplorer/TypeDoc.js
+++ b/src/components/DocExplorer/TypeDoc.js
@@ -88,6 +88,7 @@ export default class TypeDoc extends React.Component {
             .filter(field => !field.isDeprecated)
             .map(field => (
               <Field
+                schema={schema}
                 key={field.name}
                 type={type}
                 field={field}
@@ -110,6 +111,7 @@ export default class TypeDoc extends React.Component {
             ) : (
               deprecatedFields.map(field => (
                 <Field
+                  schema={schema}
                   key={field.name}
                   type={type}
                   field={field}
@@ -157,7 +159,12 @@ export default class TypeDoc extends React.Component {
 
     return (
       <div>
+        <div className="doc-type-kind">
+          {'type'}
+        </div>
         <MarkdownContent
+          schema={this.props.schema}
+          onClickType={this.props.onClickType}
           className="doc-type-description"
           markdown={type.description || 'No Description'}
         />
@@ -174,7 +181,7 @@ export default class TypeDoc extends React.Component {
   handleShowDeprecated = () => this.setState({ showDeprecated: true });
 }
 
-function Field({ type, field, onClickType, onClickField }) {
+function Field({ type, field, onClickType, onClickField, schema }) {
   return (
     <div className="doc-category-item">
       <a
@@ -197,12 +204,16 @@ function Field({ type, field, onClickType, onClickField }) {
       <DefaultValue field={field} />
       {field.description && (
         <MarkdownContent
+          schema={schema}
+          onClickType={onClickType}
           className="field-short-description"
           markdown={field.description}
         />
       )}
       {field.deprecationReason && (
         <MarkdownContent
+          schema={schema}
+          onClickType={onClickType}
           className="doc-deprecation"
           markdown={field.deprecationReason}
         />
@@ -223,11 +234,15 @@ function EnumValue({ value }) {
     <div className="doc-category-item">
       <div className="enum-value">{value.name}</div>
       <MarkdownContent
+        schema={this.props.schema}
+        onClickType={this.props.onClickType}
         className="doc-value-description"
         markdown={value.description}
       />
       {value.deprecationReason && (
         <MarkdownContent
+          schema={this.props.schema}
+          onClickType={this.props.onClickType}
           className="doc-deprecation"
           markdown={value.deprecationReason}
         />
diff --git a/src/components/GraphiQL.js b/src/components/GraphiQL.js
index 656f47e..fe1ae50 100644
--- a/src/components/GraphiQL.js
+++ b/src/components/GraphiQL.js
@@ -692,7 +692,10 @@ export class GraphiQL extends React.Component {
 
   handlePrettifyQuery = () => {
     const editor = this.getQueryEditor();
-    editor.setValue(print(parse(editor.getValue())));
+    editor.setValue(print(parse(editor.getValue()).replace(/^( +)/mg, "$1$1")));
+    const variables = JSON.stringify(JSON.parse(this.state.variables), null, 4);
+    const varEditor = this.variableEditorComponent.getCodeMirror();
+    varEditor.setValue(variables);
   };
 
   handleEditQuery = debounce(100, value => {
